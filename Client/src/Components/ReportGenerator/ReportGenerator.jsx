import React, { useState } from 'react';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import { addActivity } from '../RecentActivity/RecentActivity';
import './ReportGenerator.css';

const ReportGenerator = ({ data, chartRef, insights = [] }) => {
  const [generating, setGenerating] = useState(false);
  const [reportType, setReportType] = useState('summary');

  const generatePDFReport = async () => {
    setGenerating(true);
    
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      // Header
      pdf.setFontSize(20);
      pdf.setTextColor(102, 126, 234);
      pdf.text('DataFlow Analytics Report', 20, 30);
      
      pdf.setFontSize(12);
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
      pdf.text(`Report Type: ${reportType.charAt(0).toUpperCase() + reportType.slice(1)}`, 20, 55);
      
      let yPosition = 70;
      
      // Data Summary
      if (data) {
        pdf.setFontSize(16);
        pdf.setTextColor(102, 126, 234);
        pdf.text('Data Summary', 20, yPosition);
        yPosition += 15;
        
        pdf.setFontSize(12);
        pdf.setTextColor(0, 0, 0);
        pdf.text(`Total Records: ${data.rowCount || 'N/A'}`, 20, yPosition);
        yPosition += 10;
        pdf.text(`Columns: ${data.columnCount || 'N/A'}`, 20, yPosition);
        yPosition += 10;
        pdf.text(`File: ${data.fileName || 'N/A'}`, 20, yPosition);
        yPosition += 20;
      }
      
      // Chart
      if (chartRef && chartRef.current) {
        try {
          const canvas = await html2canvas(chartRef.current);
          const imgData = canvas.toDataURL('image/png');
          const imgWidth = pageWidth - 40;
          const imgHeight = (canvas.height * imgWidth) / canvas.width;
          
          if (yPosition + imgHeight > pageHeight - 20) {
            pdf.addPage();
            yPosition = 20;
          }
          
          pdf.addImage(imgData, 'PNG', 20, yPosition, imgWidth, imgHeight);
          yPosition += imgHeight + 20;
        } catch (error) {
          console.error('Error adding chart to PDF:', error);
        }
      }
      
      // Insights
      if (insights.length > 0) {
        if (yPosition > pageHeight - 60) {
          pdf.addPage();
          yPosition = 20;
        }
        
        pdf.setFontSize(16);
        pdf.setTextColor(102, 126, 234);
        pdf.text('AI Insights', 20,Position);
        yPosition += 15;
        
        insights.slice(0, 5).forEach((insight, index) => {
          if (yPosition > pageHeight - 40) {
            pdf.addPage();
            yPosition = 20;
          }
          
          pdf.setFontSize(12);
          pdf.setTextColor(0, 0, 0);
          pdf.text(`${index + 1}. ${insight.title}`, 20, yPosition);
          yPosition += 10;
          
          const splitDescription = pdf.splitTextToSize(insight.description, pageWidth - 40);
          pdf.text(splitDescription, 25, yPosition);
          yPosition += splitDescription.length * 5 + 10;
        });
      }
      
      // Footer
      const totalPages = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(10);
        pdf.setTextColor(128, 128, 128);
        pdf.text(`Page ${i} of ${totalPages}`, pageWidth - 40, pageHeight - 10);
        pdf.text('Generated by DataFlow Analytics', 20, pageHeight - 10);
      }
      
      // Save PDF
      const fileName = `report-${reportType}-${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);
      
      addActivity('export', `Generated ${reportType} report`, 'PDF format');
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF report');
    } finally {
      setGenerating(false);
    }
  };

  const generateExcelReport = () => {
    if (!data || !data.fullData) {
      alert('No data available for Excel export');
      return;
    }

    try {
      // Create CSV content
      const csvContent = convertToCSV(data.fullData);
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      
      link.setAttribute('href', url);
      link.setAttribute('download', `data-export-${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      addActivity('export', 'Exported data to CSV', `${data.fullData.length} records`);
      
    } catch (error) {
      console.error('Error generating Excel report:', error);
      alert('Error generating Excel report');
    }
  };

  const convertToCSV = (data) => {
    if (!data || data.length === 0) return '';
    
    const headers = Object.keys(data[0]);
    const csvHeaders = headers.join(',');
    
    const csvRows = data.map(row => 
      headers.map(header => {
        const value = row[header];
        // Escape commas and quotes
        if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value;
      }).join(',')
    );
    
    return [csvHeaders, ...csvRows].join('\n');
  };

  const downloadChartImage = async () => {
    if (!chartRef || !chartRef.current) {
      alert('No chart available for download');
      return;
    }

    try {
      const canvas = await html2canvas(chartRef.current);
      const link = document.createElement('a');
      link.download = `chart-${new Date().toISOString().split('T')[0]}.png`;
      link.href = canvas.toDataURL();
      link.click();
      
      addActivity('export', 'Downloaded chart image', 'PNG format');
      
    } catch (error) {
      console.error('Error downloading chart:', error);
      alert('Error downloading chart image');
    }
  };

  return (
    <div className="report-generator">
      <div className="report-header">
        <h3>üìä Report Generator</h3>
        <select 
          value={reportType} 
          onChange={(e) => setReportType(e.target.value)}
          className="report-type-select"
        >
          <option value="summary">Summary Report</option>
          <option value="detailed">Detailed Analysis</option>
          <option value="insights">AI Insights Report</option>
          <option value="custom">Custom Report</option>
        </select>
      </div>
      
      <div className="report-actions">
        <button 
          className="report-btn pdf-btn" 
          onClick={generatePDFReport}
          disabled={generating}
        >
          {generating ? (
            <>
              <span className="btn-spinner"></span>
              Generating...
            </>
          ) : (
            <>
              üìÑ Generate PDF
            </>
          )}
        </button>
        
        <button 
          className="report-btn excel-btn" 
          onClick={generateExcelReport}
          disabled={!data}
        >
          üìä Export to CSV
        </button>
        
        <button 
          className="report-btn image-btn" 
          onClick={downloadChartImage}
          disabled={!chartRef}
        >
          üñºÔ∏è Download Chart
        </button>
      </div>
      
      <div className="report-info">
        <small>
          Reports include data summary, visualizations, and AI insights. 
          PDF reports are comprehensive while CSV exports contain raw data.
        </small>
      </div>
    </div>
  );
};

export default ReportGenerator;