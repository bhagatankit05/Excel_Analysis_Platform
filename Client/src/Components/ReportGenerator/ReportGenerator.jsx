import React, { useState } from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { addActivity } from '../RecentActivity/RecentActivity';
import './ReportGenerator.css';

const ReportGenerator = ({ data, chartRef, insights = [] }) => {
  const [generating, setGenerating] = useState(false);
  const [reportType, setReportType] = useState('summary');

  const generatePDFReport = async () => {
    setGenerating(true);

    try {
      const pdf = new jsPDF({ unit: 'mm', format: 'a4', compress: true });
      const pageW = pdf.internal.pageSize.getWidth();
      const pageH = pdf.internal.pageSize.getHeight();
      const margin = 18;
      const brand = [94, 53, 177];
      const txt = [32, 33, 36];
      let y = 34;

      pdf.setDrawColor(230).rect(margin / 2, margin / 2, pageW - margin, pageH - margin, 'S');
      pdf.setFillColor(...brand).rect(0, 0, pageW, 24, 'F');
      pdf.setFont(pdf.getFontList()['Inter'] ? 'Inter' : 'helvetica', 'bold');
      pdf.setFontSize(15).setTextColor(255);
      pdf.text('DataFlow Analytics Report', margin, 16);

      pdf.setFontSize(11).setFont(undefined, 'normal').setTextColor(...txt);
      pdf.text(`Date · ${new Date().toLocaleDateString()}`, margin, y); y += 6;
      pdf.text(`Report Type · ${reportType}`, margin, y); y += 12;

      if (data) {
        pdf.setFontSize(13).setFont(undefined, 'bold').setTextColor(...brand);
        pdf.text('Summary', margin, y); y += 7;
        pdf.setFontSize(11).setFont(undefined, 'normal').setTextColor(...txt);
        pdf.text(`• File: ${data.fileName ?? 'N/A'}`, margin, y); y += 6;
        pdf.text(`• Rows: ${data.rowCount ?? 'N/A'}`, margin, y); y += 6;
        pdf.text(`• Columns: ${data.columnCount ?? 'N/A'}`, margin, y); y += 10;
      }

      const chartDataURL = async () => {
        if (!chartRef?.current) return null;
        if (chartRef.current.toBase64Image) return chartRef.current.toBase64Image();
        if (chartRef.current.getDataURL) return chartRef.current.getDataURL({ type: 'png', pixelRatio: 2 });
        const node = chartRef.current.canvas || chartRef.current.querySelector?.('canvas') || chartRef.current;
        const c = await html2canvas(node, { scale: 2, useCORS: true });
        return c.toDataURL('image/png');
      };

      const imgURL = await chartDataURL();
      if (imgURL) {
        const imgW = pageW - margin * 2;
        const imgH = (imgW * 9) / 16;
        if (y + imgH > pageH - margin) { pdf.addPage(); pdf.rect(margin / 2, margin / 2, pageW - margin, pageH - margin, 'S'); y = margin + 16; }
        pdf.setFontSize(13).setFont(undefined, 'bold').setTextColor(...brand);
        pdf.text('Visualization', margin, y); y += 5;
        pdf.addImage(imgURL, 'PNG', margin, y, imgW, imgH, '', 'FAST');
        y += imgH + 12;
      }

      if (insights.length) {
        if (y > pageH - 40) { pdf.addPage(); pdf.rect(margin / 2, margin / 2, pageW - margin, pageH - margin, 'S'); y = margin + 16; }
        pdf.setFontSize(13).setFont(undefined, 'bold').setTextColor(...brand);
        pdf.text('AI Insights', margin, y); y += 7;
        pdf.setFontSize(11).setFont(undefined, 'normal').setTextColor(...txt);

        insights.slice(0, 5).forEach((ins, idx) => {
          if (y > pageH - 30) { pdf.addPage(); pdf.rect(margin / 2, margin / 2, pageW - margin, pageH - margin, 'S'); y = margin + 16; }
          pdf.setFont(undefined, 'bold').text(`${idx + 1}. ${ins.title}`, margin, y); y += 5;
          pdf.setFont(undefined, 'normal');
          const wrap = pdf.splitTextToSize(ins.description, pageW - margin * 2);
          pdf.text(wrap, margin + 4, y); y += wrap.length * 5 + 6;
        });
      }

      const pages = pdf.internal.getNumberOfPages();
      for (let p = 1; p <= pages; p++) {
        pdf.setPage(p);
        pdf.setFontSize(9).setTextColor(120);
        pdf.text('Generated by DataFlow Analytics Platform', margin, pageH - margin / 1.4);
        pdf.text(`Page ${p}/${pages}`, pageW - margin, pageH - margin / 1.4, { align: 'right' });
      }

      pdf.save(`report-${reportType}-${new Date().toISOString().slice(0, 10)}.pdf`);
      addActivity('export', `Generated ${reportType} report`, 'PDF');
    } catch (e) {
      console.error(e);
      alert('PDF generation failed');
    } finally {
      setGenerating(false);
    }
  };

  const downloadChartImage = async () => {
    if (!chartRef?.current) return alert('No chart found');

    const node = chartRef.current.canvas || chartRef.current.querySelector?.('canvas') || chartRef.current;
    const base = chartRef.current.toBase64Image?.() || (await html2canvas(node, { scale: 2, useCORS: true })).toDataURL('image/png');

    const img = new Image();
    img.src = base;
    img.onload = () => {
      const c = document.createElement('canvas');
      c.width = img.width;
      c.height = img.height + 36;
      const ctx = c.getContext('2d');
      ctx.drawImage(img, 0, 0);
      ctx.fillStyle = 'rgba(94,53,177,0.9)';
      ctx.font = '16px Inter,Helvetica,sans-serif';
      ctx.textAlign = 'right';
      ctx.fillText('Generated by DataFlow Analytics Platform', c.width - 12, c.height - 12);

      const link = Object.assign(document.createElement('a'), {
        href: c.toDataURL('image/png'),
        download: `chart-${new Date().toISOString().slice(0, 10)}.png`
      });
      link.click();
      addActivity('export', 'Downloaded chart image', 'PNG + caption');
    };
    img.onerror = () => alert('Image export failed');
  };

  const toCSV = (rows = []) =>
    rows.length
      ? [
        Object.keys(rows[0]).join(','),
        ...rows.map((r) =>
          Object.values(r)
            .map((v) =>
              typeof v === 'string' && /[",]/.test(v) ? `"${v.replace(/"/g, '""')}"` : v
            )
            .join(',')
        )
      ].join('\n')
      : '';

  const exportCsv = () => {
    if (!data?.fullData?.length) return alert('No data');
    const blob = new Blob([toCSV(data.fullData)], { type: 'text/csv' });
    const link = Object.assign(document.createElement('a'), {
      href: URL.createObjectURL(blob),
      download: `data-${Date.now()}.csv`
    });
    link.click();
    addActivity('export', 'Exported data to CSV', `${data.fullData.length} rows`);
  };

  return (
    <div className="report-generator">
      <div className="report-header">
        <h3>📊 Report Generator</h3>
        <select value={reportType} onChange={(e) => setReportType(e.target.value)} className="report-type-select">
          <option value="summary">Summary Report</option>
          <option value="detailed">Detailed Analysis</option>
          <option value="insights">AI Insights Report</option>
          <option value="custom">Custom Report</option>
        </select>
      </div>

      <div className="report-actions">
        <button className="report-btn pdf-btn" onClick={generatePDFReport} disabled={generating}>
          {generating ? <><span className="btn-spinner"></span>Generating…</> : <>📄 Generate PDF</>}
        </button>
        <button className="report-btn excel-btn" onClick={exportCsv} disabled={!data}>📊 Export CSV</button>
        <button className="report-btn image-btn" onClick={downloadChartImage} disabled={!chartRef}>🖼️ Chart PNG</button>
      </div>

      <div className="report-info">
        <small>PDF = summary + chart + insights  ·  CSV = raw data</small>
      </div>
    </div>
  );
};

export default ReportGenerator;
